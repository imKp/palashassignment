//This file stores all the recent searches.
//All the searches are stored in a sql database.
//The Structure of sql databse is of two vairiable, that relates to every search.
//A uniquie id generated by sql itsels, and a text to store what was being searched.

//Library used is sqflite, for more information check pubsec.yaml

import 'package:sqflite/sqflite.dart' as sql;
import 'package:path/path.dart' as path;
import 'package:sqflite/sqflite.dart';


class DBHelper {
  //Function creates a db.
  //On creation of db it creates a table
  static Future<Database> database() async {
    final dbPath = await sql.getDatabasesPath();
    return sql.openDatabase(path.join(dbPath, 'palash.db'),
        // ignore: void_checks
        onCreate: (db, version) {
      return _createDb(db, version);
    }, version: 1);
  }

 static Future _createDb(Database db, int version) async{
   await db
          .execute('CREATE TABLE searches(title TEXT PRIMARY KEY, when_searched TEXT)');
    await db
    .execute('CREATE TABLE comments(id INT PRIMARY KEY, comment TEXT)');
 }

  //Function to insert data to table

  static Future<void> insert(String table, Map<String, Object> data) async {
    final db = await DBHelper.database();
    //print('Into insert function');
    db.insert(
      table,
      data,
      conflictAlgorithm: ConflictAlgorithm.replace, //This won't allow multiple entries of same search
    );
  }


  static Future<String> getCommentFromGivenId(String table, int id) async {
    final db = await DBHelper.database();
    final listOfData = await db.query(table , where: '"id" = ?', whereArgs: [id]);
    //print(listOfData);
    var theComment = listOfData[0]['comment']; 
   // print(theComment);
    return theComment.toString();
  }

  //Function to reterive data

 

  // A method that retrieves all the dogs from the dogs table.
static Future<List<String>> recentSearchesFromDb() async {
  // Get a reference to the database.
  final db = await DBHelper.database();

  // Query the table for all The Dogs.
  final List<Map<String, dynamic>> maps = await db.rawQuery('SELECT * FROM searches ORDER BY when_searched DESC LIMIT 5;');

  // Convert the List<Map<String, dynamic> into a List<Dog>.
  return List.generate(maps.length, (i) {
    //print(maps[i]['title']);
    return maps[i]['title'];
  });
}

}
